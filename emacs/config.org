* TABLE OF CONTENT :TOC_2:
- [[#elpaca][ELPACA]]
- [[#must-have][MUST-HAVE]]
- [[#keybinds][KEYBINDS]]
- [[#org][ORG]]
  - [[#table-of-content][Table of Content]]
  - [[#bullets][Bullets]]
  - [[#level-header][Level Header]]
  - [[#source-code-tag-expansion][Source code Tag Expansion]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#roam][ROAM]]
- [[#avy][AVY]]
- [[#dired][DIRED]]
- [[#emacs-config][EMACS-CONFIG]]
- [[#multiple-cursors][MULTIPLE-CURSORS]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#vterm][VTERM]]
- [[#smartparens][SMARTPARENS]]
- [[#corfu][CORFU]]
- [[#magit][MAGIT]]
- [[#anzu][ANZU]]
- [[#themes][THEMES]]
- [[#doom-modeline][DOOM-MODELINE]]
- [[#custom-fonts][CUSTOM-FONTS]]
- [[#nerd-icons][NERD-ICONS]]
- [[#dimmer][DIMMER]]
- [[#winner-undo][WINNER UNDO]]
- [[#window-numbering][Window Numbering]]
- [[#orderless][ORDERLESS]]
- [[#consult][CONSULT]]
- [[#vertico][VERTICO]]
- [[#marginalia][MARGINALIA]]
- [[#which-key][WHICH KEY]]
- [[#indent-bars][INDENT-BARS]]
- [[#isearch][ISEARCH]]
- [[#magit-todos][MAGIT-TODOS]]
- [[#consult-project][CONSULT-PROJECT]]
- [[#drag-stuff][DRAG-STUFF]]
- [[#good-scroll][GOOD-SCROLL]]
- [[#git-gutter][GIT-GUTTER]]
- [[#beacon][BEACON]]
- [[#solaire-mode][SOLAIRE-MODE]]
- [[#dashboard][DASHBOARD]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#embark][EMBARK]]
- [[#activities][ACTIVITIES]]
- [[#forge][FORGE]]
- [[#hs-minor-mode][HS-MINOR-MODE]]
- [[#dired-hacks][DIRED-HACKS]]
- [[#git-timemachine][GIT-TIMEMACHINE]]
- [[#custom-functions][CUSTOM FUNCTIONS]]
- [[#window-swap][WINDOW-SWAP]]
- [[#impatient-mode][IMPATIENT-MODE]]
- [[#buffer-terminator][BUFFER-TERMINATOR]]
- [[#yasnippet][YASNIPPET]]
- [[#emacs-async][EMACS-ASYNC]]
- [[#casual-avy][CASUAL-AVY]]
- [[#org-journal][ORG-JOURNAL]]
- [[#ediff][EDIFF]]
- [[#workgroups2][WORKGROUPS2]]
- [[#languages][LANGUAGES]]
  - [[#kbd-mode][KBD-MODE]]
  - [[#bsv][BSV]]
  - [[#synopsys-design-constraint-sdc][SYNOPSYS DESIGN CONSTRAINT (SDC)]]
  - [[#python][PYTHON]]
  - [[#yaml][YAML]]
  - [[#markdown-mode][MARKDOWN-MODE]]
  - [[#formatting][FORMATTING]]
  - [[#dockerfile][DOCKERFILE]]

* ELPACA
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

* MUST-HAVE
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(set-language-environment "UTF-8")

;; smart beginning-of-line (BOL)
(defadvice move-beginning-of-line (around smarter-bol activate)
  ;; Move to requested line if needed.
  (let ((arg (or (ad-get-arg 0) 1)))
    (when (/= arg 1)
      (forward-line (1- arg))))
  ;; Move to indentation on first call, then to actual BOL on second.
  (let ((pos (point)))
    (back-to-indentation)
    (when (= pos (point))
      ad-do-it)))


(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
                     (car next-win-edges))
                     (<= (cadr this-win-edges)
                     (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
             (car (window-edges (next-window))))
          'split-window-horizontally
        'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))


(global-set-key (kbd "C-x |") 'toggle-window-split)
#+end_src

* KEYBINDS
#+begin_src emacs-lisp 
(use-package general
  :config
  (general-create-definer rgrs-leader-keys
    :prefix "C-x")
  ;; (rgrs-leader-keys
  ;;   ;; "b" '(:ignore t :wk "buffer")
  ;;   "b" '(consult-buffer :wk "Switch buffer")
  ;;   )

  ;; GIT
  ;; (global-unset-key (kbd "C-x g"))
  ;; (rgrs-leader-keys
  ;;   "g" `(:ignore t :wk "Magit")
  ;;   "g c" `(magit-clone :wk "Magit Clone")
  ;;   "g g" `(magit-status :wk "Magit status")
  ;;   "g i" `(magit-init :wk "Magit Init repo")
    
  ;;   )
  (general-define-key
    "<f7>" `display-line-numbers-mode)
  (general-define-key "<f5>" `revert-buffer-quick)
     
  )
#+end_src



* ORG
** Table of Content
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enablepp
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Level Header
#+begin_src emacs-lisp
(custom-set-faces
'(org-level-1 ((t (:inherit outline-1 :height 1.35))))
'(org-level-2 ((t (:inherit outline-2 :height 1.3))))
'(org-level-3 ((t (:inherit outline-3 :height 1.25))))
'(org-level-4 ((t (:inherit outline-4 :height 1.25))))
'(org-level-5 ((t (:inherit outline-5 :height 1.2))))
'(org-level-6 ((t (:inherit outline-5 :height 1.15))))
'(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Source code Tag Expansion
Current Expansions include [[https://orgmode.org/manual/Structure-Templates.html]]

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
| <el                    | '#+BEGIN_SRC emacs-lisp' … '#+END_SRC'  |


#+begin_src emacs-lisp
(require `org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** ROAM
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(
     ("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
     )
   )
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup))
#+end_src

* AVY
#+begin_src emacs-lisp
(use-package avy
  :config
  (general-define-key "M-s c" `avy-goto-char)
  (general-define-key "M-s C" `avy-goto-char-2)
  (avy-setup-default)
  (global-set-key (kbd "C-c C-j") 'avy-resume)
  (global-set-key (kbd "M-j") `avy-goto-char-timer)
  (general-define-key "M-s s" `avy-copy-line)
  (general-define-key "M-s S" `avy-copy-region)
  )
#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :config
  (setq insert-directory-program "ls" dired-use-ls-dired nil)
  (setq dired-listing-switches "-agho --group-directories-first")
  (setq dired-dwim-target t)
  )

#+end_src

* EMACS-CONFIG
#+begin_src emacs-lisp
;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :custom
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
  ;; mode.  Vertico commands are hidden in normal buffers. This setting is
  ;; useful beyond Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

)
(setopt use-short-answers t)
#+end_src

* MULTIPLE-CURSORS
#+begin_src emacs-lisp
(use-package multiple-cursors
  :config
  (general-define-key "C-S-c C-S-c" 'mc/edit-lines)
  (general-define-key "C->" 'mc/mark-next-like-this-word)
  (general-define-key "C-<" 'mc/mark-previous-like-this-word)
  (general-define-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
  )
#+end_src

* RAINBOW DELIMITERS
#+begin_src emacs-lisp 
(use-package rainbow-delimiters
:config
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

* RAINBOW MODE
#+begin_src emacs-lisp
(use-package rainbow-mode
:hook org-mode prog-mode)
#+end_src

* VTERM
#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/usr/bin/bash")
(add-to-list 'vterm-tramp-shells '("ssh" "/bin/bash"))
(add-to-list 'vterm-tramp-shells '("sudo" "/bin/bash"))
)


(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))

(use-package multi-vterm 
  :after vterm    
  :ensure t
  :bind 
  (
   ("C-c t t" . multi-vterm-dedicated-toggle)
   ("C-c t n" . multi-vterm)
   ("C-c t p" . multi-vterm-project)
   )
  :config
  (setq multi-vterm-dedicated-window-height-percent 30)
  
)
#+end_src

* SMARTPARENS
#+begin_src emacs-lisp
(use-package smartparens
:config
(smartparens-global-mode))

#+end_src

* CORFU
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?_)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  ;; :init
  ;; (global-corfu-mode)
  )

(add-hook 'elpaca-after-init-hook 'global-corfu-mode)
;; Enable Corfu completion UI
;; See the Corfu README for more configuration tips.
;; Add extensions

(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-hook 'completion-at-point-functions #'cape-history)
  ;;(add-hook 'completion-at-point-functions #'cape-keyword)
  ;;(add-hook 'completion-at-point-functions #'cape-tex)
  ;;(add-hook 'completion-at-point-functions #'cape-sgml)
  ;;(add-hook 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-hook 'completion-at-point-functions #'cape-abbrev)
  ;;(add-hook 'completion-at-point-functions #'cape-dict)
  ;;(add-hook 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-hook 'completion-at-point-functions #'cape-line)
)

;; (use-package kind-icon
;;   :ensure t
;;   :after corfu
;;   ;:custom
;;   ; (kind-icon-blend-background t)
;;   ; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
;;   :config
;;   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

* MAGIT
#+begin_src emacs-lisp
(use-package magit
  :config
  (global-unset-key (kbd "C-x g"))
  (rgrs-leader-keys
    "g" `(:ignore t :wk "Magit")
    "g c" `(magit-clone :wk "Magit Clone")
    "g g" `(magit-status :wk "Magit status")
    "g i" `(magit-init :wk "Magit Init repo")
    )

)
(use-package transient)

(defun magit-add-current-buffer-to-kill-ring ()
  "Show the current branch in the echo-area and add it to the `kill-ring'."
  (interactive)
  (let ((branch (magit-get-current-branch)))
    (if branch
        (progn (kill-new branch)
               (message "%s" branch))
      (user-error "There is not current branch"))))

(with-eval-after-load 'magit
  (define-key magit-mode-map (kbd "M-w") #'magit-add-current-buffer-to-kill-ring))

#+end_src

* ANZU
#+begin_src emacs-lisp
(use-package anzu
:config
(global-anzu-mode 1)
(general-define-key [remap query-replace] 'anzu-query-replace)
(general-define-key [remap query-replace-regexp] 'anzu-query-replace-regexp))
#+end_src

* THEMES
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

(use-package doom-themes
:ensure t
:config
(setq doom-themes-enabled-bold t
      doom-themes-enable-italic t))

(setq custom-safe-themes t)
(add-hook 'elpaca-after-init-hook (lambda() (load-theme 'doom-opera)))
#+end_src

* DOOM-MODELINE
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init
  ;; (setq doom-modeline-support-imenu t) 
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-project-detection 'auto)

  ;; Specification of \"percentage offset\" of window through buffer.
  (setq doom-modeline-percent-position '(-3 "%p"))

  ;; ;; Format used to display line numbers in the mode line. Also used to display column for some reason
  (setq doom-modeline-position-line-format '("%l:%c"))
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-enable-word-count nil)
  (setq doom-modeline-time-icon t)
  (setq doom-modeline-time-live-icon t)
  (setq doom-modeline-time-analogue-clock t)

  )
#+end_src

* CUSTOM-FONTS
#+begin_src emacs-lisp
(defface nerd-icons-bluespec-blue
  '((((background dark)) :foreground "#0082f1")
    (((background light)) :foreground "#0082f1"))
  "Face for bluespec blue."
  :group 'nerd-icons-faces)

;; custom 
(defcustom fontello-font-family "fontello"
  "The Nerd Font for display icons."
  :group 'nerd-icons
  :type 'string)

(require 'fontello  "~/.config/emacs/fonts/fontello.el")
#+end_src

* NERD-ICONS
#+begin_src emacs-lisp
(use-package nerd-icons
  :config
  (add-to-list 'nerd-icons-extension-icon-alist `("bsv"   nerd-icons-fontello "nf-bluespec"    :face nerd-icons-bluespec-blue))
  (add-to-list 'nerd-icons-mode-icon-alist `(bsv-mode   nerd-icons-fontello "nf-bluespec"    :face nerd-icons-bluespec-blue))
  (nerd-icons-define-icon fontello nerd-icons/fontello-alist fontello-font-family "Fontello")
  )

(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-corfu
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
)


;; Optionally:
;; (setq nerd-icons-corfu-mapping
;;       '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
;;         (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
;;         ;; ...
;;         (t :style "cod" :icon "code" :face font-lock-warning-face)))
;; Remember to add an entry for `t', the library uses that as default.

;; The Custom interface is also supported for tuning the variable above.


#+end_src

* DIMMER
#+begin_src emacs-lisp :tangle no
(use-package dimmer
:config
(dimmer-configure-which-key)
(dimmer-mode t))

#+end_src

* WINNER UNDO
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

* Window Numbering
#+begin_src emacs-lisp 
(use-package winum
:config
(winum-mode))

(global-set-key (kbd "C-0") 'winum-select-window-0)
(global-set-key (kbd "C-1") 'winum-select-window-1)
(global-set-key (kbd "C-2") 'winum-select-window-2)
(global-set-key (kbd "C-3") 'winum-select-window-3)
(global-set-key (kbd "C-4") 'winum-select-window-4)
(global-set-key (kbd "C-5") 'winum-select-window-5)
(global-set-key (kbd "C-6") 'winum-select-window-6)
(global-set-key (kbd "C-7") 'winum-select-window-7)
(global-set-key (kbd "C-8") 'winum-select-window-8)
#+end_src

* ORDERLESS
#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src


* CONSULT
#+begin_src emacs-lisp
(use-package consult
  :config
  (require 'consult-imenu)

  (when (boundp 'consult-imenu-config)
    (add-to-list 'consult-imenu-config
                 '(bsv-mode
                   :toplevel "Modules"
                   :types ((?m "Modules" font-lock-function-name-face)
                           (?r "Rules" font-lock-function-name-face)))))
  (consult-customize
   consult-line
   :add-history (seq-some #'thing-at-point '(region symbol)))
  
  (defalias 'consult-line-thing-at-point 'consult-line)
  
  (consult-customize
   consult-line-thing-at-point
   :initial (thing-at-point 'symbol))
:bind (
       ("C-x b" . consult-buffer)
       ("M-g i" . consult-imenu)
       ("C-x r b" . consult-bookmark)
       ("M-s l" . consult-line)
       ("M-s L" . consult-line-thing-at-point)
       ("M-s g" . consult-grep)
       ("M-s r" . consult-ripgrep)
       ("M-g g" . consult-goto-line) 
       ("M-g M-g" . consult-goto-line)
       ("C-x p b" . consult-project-buffer)
       ("M-y"     . consult-yank-from-kill-ring)
       ;; M-s bindings in `search-map'
       ("M-s d" . consult-find) 
       ("M-s k" . consult-keep-lines)
       ("M-s u" . consult-focus-lines)
       ("M-g m" . consult-mark)
       )
)


#+end_src

* VERTICO
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

(use-package savehist
  :ensure nil
  :init
  (savehist-mode))

(setq enable-recursive-minibuffers t)
#+end_src

* MARGINALIA
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

#+end_src

* WHICH KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src

* INDENT-BARS
#+begin_src emacs-lisp
(use-package indent-bars
  :ensure (:host github :repo "jdtsmith/indent-bars")
  :hook ((prog-mode) . indent-bars-mode)
  )
#+end_src

* ISEARCH
#+begin_src emacs-lisp
(use-package isearch
  :ensure nil
  :bind
  ("C-*" . 'isearch-forward-symbol-at-point)
  )
#+end_src

* MAGIT-TODOS
#+begin_src emacs-lisp
(use-package magit-todos
  :after magit
  :config (magit-todos-mode 1))
#+end_src

* CONSULT-PROJECT
#+begin_src emacs-lisp
(use-package consult-project-extra
  :bind
  (("C-c p f" . consult-project-extra-find)
   ("C-c p o" . consult-project-extra-find-other-window)
   ;; ("C-x b" . consult-project-buffer)
   )
  )
#+end_src

* DRAG-STUFF
#+begin_src emacs-lisp
(use-package drag-stuff
  :config
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys)
  )
#+end_src

* GOOD-SCROLL
#+begin_src emacs-lisp
(use-package good-scroll
  :config
  (good-scroll-mode 1)
  (global-set-key [next] #'good-scroll-up-full-screen)
  (global-set-key [prior] #'good-scroll-down-full-screen)
)
#+end_src

* GIT-GUTTER
#+begin_src emacs-lisp
(use-package git-gutter
  :config
  (global-git-gutter-mode 1)
)
#+end_src

* BEACON
#+begin_src emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
)
#+end_src

* SOLAIRE-MODE
#+begin_src emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode +1)
)
#+end_src


* DASHBOARD 
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

;; Set the title
;; (setq dashboard-banner-logo-title "Life is all about MinMacs")
;; Set the banner
;; (setq dashboard-startup-banner "/home/rohit/.config/emacs/images/Final_Splash_screen.txt")
;; Value can be
;; - nil to display no banner
;; - 'official which displays the official emacs logo
;; - 'logo which displays an alternative emacs logo
;; - 1, 2 or 3 which displays one of the text banners
;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

;; Content is not centered by default. To center, set
(setq dashboard-center-content t)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts t)

(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
(setq dashboard-display-icons-p t)
(setq dashboard-icon-type 'nerd-icons)
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
#+end_src

* HIGHLIGHT TODO 
#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))

#+end_src

* EMBARK
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package wgrep)

#+end_src

* ACTIVITIES 
#+begin_src emacs-lisp
(use-package activities
  :init
  (activities-mode)
  (activities-tabs-mode)
  ;; Prevent `edebug' default bindings from interfering.
  (setq edebug-inhibit-emacs-lisp-mode-bindings t)

  :bind
  (("C-x C-a C-n" . activities-new)
   ("C-x C-a C-d" . activities-define)
   ("C-x C-a C-a" . activities-resume)
   ("C-x C-a C-s" . activities-suspend)
   ("C-x C-a C-k" . activities-kill)
   ("C-x C-a RET" . activities-switch)
   ("C-x C-a b" . activities-switch-buffer)
   ("C-x C-a g" . activities-revert)
   ("C-x C-a l" . activities-list)))
#+end_src 

* FORGE 
#+begin_src emacs-lisp
(use-package forge
  :after magit
  :config
  (setq auth-sources '("~/.authinfo"))
)
#+end_src

* HS-MINOR-MODE
#+begin_src emacs-lisp
(use-package hs-minor-mode
  :ensure nil
  :hook prog-mode
  :bind
  (("C-c f" . hs-toggle-hiding)
   ("C-c l" . hs-hide-level)
   ("C-c U" . hs-show-all)
   )
  )
#+end_src

* DIRED-HACKS
#+begin_src emacs-lisp
(use-package dired-hacks-utils)

(use-package dired-filter)

;; (use-package dired-avfs)

(use-package dired-open
  :config
  (setq dired-open-extensions '(("vcd" . "surfer")
				("fst" . "surfer"))))


(use-package dired-rainbow
  :config
  (progn
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffad4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java" "bsv"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ff0d4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
    ))

(use-package dired-subtree
  :config
  (define-key dired-mode-map (kbd "i") `dired-subtree-toggle)
  )

(use-package dired-ranger
  :bind 
  (:map dired-mode-map
	("C-c c" . dired-ranger-copy)
	("C-c y" . dired-ranger-paste)
	("C-c r" . dired-ranger-move)
   ))


(use-package dired-narrow)

(use-package dired-list)

(use-package dired-collapse)

#+end_src


* GIT-TIMEMACHINE
#+begin_src emacs-lisp
(use-package git-timemachine)
#+end_src

* CUSTOM FUNCTIONS
#+begin_src emacs-lisp
(defun switch-to-minibuffer ()
  "Switch to minibuffer window."
  (interactive)
  (if (active-minibuffer-window)
      (select-window (active-minibuffer-window))
    (error "Minibuffer is not active")))

(global-set-key (kbd "C-`") #'switch-to-minibuffer) 

(defun prot-simple-keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(global-set-key (kbd "C-g") #'prot-simple-keyboard-quit-dwim) 
#+end_src

* WINDOW-SWAP
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-<left>") 'windmove-swap-states-left )
(global-set-key (kbd "C-c C-<right>") 'windmove-swap-states-right )
(global-set-key (kbd "C-c C-<up>") 'windmove-swap-states-up )
(global-set-key (kbd "C-c C-<down>") 'windmove-swap-states-down )
#+end_src

* IMPATIENT-MODE
#+begin_src emacs-lisp
(use-package impatient-mode)
#+end_src

* BUFFER-TERMINATOR
#+begin_src emacs-lisp
(use-package buffer-terminator
  :ensure t
  :custom
  (buffer-terminator-verbose nil)
  :config
  (buffer-terminator-mode 1))
#+end_src

* YASNIPPET
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1)
  )

(use-package yasnippet-snippets)

(use-package consult-yasnippet
  :config
  (general-define-key "C-c i s" `consult-yasnippet)
)
#+end_src

* EMACS-ASYNC
#+begin_src emacs-lisp
(use-package async
  :custom
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1)
  )

#+end_src

* CASUAL-AVY
#+begin_src emacs-lisp
(use-package casual-avy
  :bind 
  (
   ("M-s t" . casual-avy-tmenu)
   )
  )

#+end_src

* ORG-JOURNAL
#+begin_src emacs-lisp
(use-package org-journal)
#+end_src

* EDIFF
#+begin_src emacs-lisp
(use-package ediff
  :ensure nil
  :init
  (setq ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)
)
#+end_src

* WORKGROUPS2
#+begin_src emacs-lisp
(use-package workgroups2
  :config
  (setq wg-prefix-key "C-c z")
  (setq wg-session-file "~/.config/emacs/.emacs_workgroups")
  (workgroups-mode 1)
  :bind
  (
   ("C-x C-a c" . wg-create-workgroup)
   ("C-x C-a o" . wg-open-workgroup)
   ("C-x C-a k" . wg-kill-workgroup)
   ("C-x C-a s" . wg-switch-to-workgroup)
   )
  )
#+end_src

* LANGUAGES
** KBD-MODE
#+begin_src emacs-lisp
(use-package kbd-mode 
  :ensure (:host github :repo "kmonad/kbd-mode")
  ;;(kbd-mode-kill-kmonad "pkill -9 kmonad")
  ;;(kbd-mode-start-kmonad "kmonad ~/path/to/config.kbd")
)
#+end_src

** BSV
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/languages/bsv/")
(add-to-list 'load-path "~/.config/emacs/languages/bsv/emacs20-extras.el")
(add-to-list 'load-path "~/.config/emacs/languages/bsv/mark.el")

(autoload 'bsv-mode "bsv-mode" "BSV mode" t )
(setq auto-mode-alist (cons  '("\\.bsv\\'" . bsv-mode) auto-mode-alist))
(setq auto-mode-alist (cons  '("\\.defines\\'" . bsv-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.defs\\'" . bsv-mode) auto-mode-alist))
(setq bsv-indent-level 2)
(setq bsv-indent-level-module 2)
(setq bsv-indent-level-declaration 2)
(setq bsv-indent-level-directive 2)
(setq bsv-indent-level-behavioral 2)
(setq bsv-cexp-indent 2)
(setq bsv-tab-always-indent nil)

;;TODO: ADD ICON for BLUESPEC
(defun bsv-append-method-name-to-endmethod ()
  "Improved version with exact method name capture"
  (when (and (eq major-mode 'bsv-mode)
             (save-excursion
               (beginning-of-line)
               (looking-at "^\\s-*endmethod\\s-*$")))
    (let ((method-name nil))
      (save-excursion
        (when (re-search-backward 
               "^\\s-*method\\s-+\\(?:\\S-+\\s-+\\)?\\([^ \t\n(]+\\)\\s-*(" 
               nil t)
          (setq method-name (match-string 1))))
      (when method-name
        (end-of-line)
        (unless (looking-back (concat ":\\s-*" method-name "\\s-*") (line-beginning-position))
          (insert (concat ": " method-name)))))))


(defun bsv-endmethod-advice (orig-fun &rest args)
  "Same advice wrapper as before"
  (apply orig-fun args)
  (bsv-append-method-name-to-endmethod))

(advice-add 'bsv-complete-or-indent-command :around #'bsv-endmethod-advice)


#+end_src

** SYNOPSYS DESIGN CONSTRAINT (SDC)
#+begin_src emacs-lisp
(setq auto-mode-alist (cons '("\\.sdc\\'" . tcl-mode) auto-mode-alist))

#+end_src

** PYTHON
#+begin_src emacs-lisp
(use-package anaconda-mode
:config
(add-hook 'python-mode-hook 'anaconda-mode))

#+end_src

** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
:config
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook
    '(lambda ()
    (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

)


#+end_src

** MARKDOWN-MODE
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))

#+end_src

** FORMATTING
#+begin_src emacs-lisp
(defun rgrs/spc_4_indent ()
 "Updates the indent tabs mode to nil"
(interactive)
(setq indent-tabs-mode nil))

(defun rgrs/test_print ()
 "Updates the indent tabs mode to nil"
(interactive)
(message "BSV-Mode loaded"))
(add-hook 'bsv-mode-hook #'rgrs/spc_4_indent)
(add-hook 'bsv-mode-hook 'rgrs/test_print)
(add-hook 'prog-hook #'rgrs/spc_4_indent)

#+end_src

** DOCKERFILE
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
